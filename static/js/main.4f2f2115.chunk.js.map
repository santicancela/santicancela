{"version":3,"sources":["create.js","config.js","preload.js","App.js","serviceWorker.js","index.js"],"names":["platforms","cursors","player","stars","scoreText","bombs","score","gameOver","hitBomb","bomb","this","physics","pause","setTint","anims","play","collectStar","star","disableBody","setText","countActive","children","iterate","child","enableBody","x","Phaser","Math","Between","create","scaleX","scaleY","setBounce","setCollideWorldBounds","setVelocity","allowGravity","type","AUTO","width","height","default","arcade","gravity","y","debug","scene","preload","load","image","spritesheet","frameWidth","frameHeight","add","text","fontSize","fill","group","staticGroup","setScale","refreshBody","sprite","key","frames","generateFrameNumbers","start","end","frameRate","repeat","frame","input","keyboard","createCursorKeys","setXY","stepX","setBounceY","FloatBetween","collider","overlap","update","left","isDown","setVelocityX","right","up","body","touching","down","setVelocityY","Game","config","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4f2f2115.chunk.js","sourcesContent":["import Phaser from 'phaser';\nimport {getCenter} from './config';\nimport _ from 'lodash';\n\nlet platforms;\nlet cursors;\nlet player;\nlet stars;\nlet score = 0;\nlet scoreText;\nlet bombs;\nlet gameOver = false;\n\nfunction hitBomb(player, bomb) {\n  this.physics.pause();\n\n  player.setTint(0xff0000);\n\n  player.anims.play('turn');\n\n  gameOver = true;\n}\n\nfunction collectStar(player, star) {\n  star.disableBody(true, true);\n\n  //  Add and update the score\n  score += 10;\n  scoreText.setText(score + ' dolares salvados del peronismo');\n\n  if (stars.countActive(true) === 0) {\n    //  A new batch of stars to collect\n    stars.children.iterate(function (child) {\n      child.enableBody(true, child.x, 0, true, true);\n    });\n\n    var x =\n      player.x < 400\n        ? Phaser.Math.Between(400, 800)\n        : Phaser.Math.Between(0, 400);\n\n    var bomb = bombs.create(x, 16, 'bomb');\n    bomb.scaleX = 0.3;\n    bomb.scaleY = 0.3;\n    bomb.setBounce(1);\n    bomb.setCollideWorldBounds(true);\n    bomb.setVelocity(Phaser.Math.Between(-200, 200), 20);\n    bomb.allowGravity = false;\n  }\n}\n\nexport default function create() {\n  this.add.image(400, 300, 'sky');\n\n  scoreText = this.add.text(16, 16, '0', {\n    fontSize: '32px',\n    fill: '#000',\n  });\n\n  bombs = this.physics.add.group();\n\n  platforms = this.physics.add.staticGroup();\n  platforms.create(400, 568, 'ground').setScale(2).refreshBody();\n\n  platforms.create(600, 400, 'ground');\n  platforms.create(50, 250, 'ground');\n  platforms.create(750, 220, 'ground');\n\n  player = this.physics.add.sprite(100, 450, 'dude');\n  player.setBounce(0.2);\n  player.setCollideWorldBounds(true);\n\n  this.anims.create({\n    key: 'left',\n    frames: this.anims.generateFrameNumbers('dude', {start: 0, end: 3}),\n    frameRate: 10,\n    repeat: -1,\n  });\n\n  this.anims.create({\n    key: 'turn',\n    frames: [{key: 'dude', frame: 4}],\n    frameRate: 20,\n  });\n\n  this.anims.create({\n    key: 'right',\n    frames: this.anims.generateFrameNumbers('dude', {start: 5, end: 8}),\n    frameRate: 10,\n    repeat: -1,\n  });\n\n  cursors = this.input.keyboard.createCursorKeys();\n\n  stars = this.physics.add.group({\n    key: 'dollar',\n    repeat: 11,\n    setXY: {x: 12, y: 0, stepX: 70},\n  });\n\n  stars.children.iterate((star) => {\n    star.setBounceY(Phaser.Math.FloatBetween(0.4, 0.8));\n    star.scaleX = 0.1;\n    star.scaleY = 0.1;\n  });\n\n  this.physics.add.collider(player, platforms);\n  this.physics.add.collider(stars, platforms);\n\n  this.physics.add.overlap(player, stars, collectStar, null, this);\n  this.physics.add.collider(player, bombs, hitBomb, null, this);\n}\n\nexport function update() {\n  if (gameOver) {\n    return;\n  }\n\n  if (cursors.left.isDown) {\n    player.setVelocityX(-160);\n\n    player.anims.play('left', true);\n  } else if (cursors.right.isDown) {\n    player.setVelocityX(160);\n\n    player.anims.play('right', true);\n  } else {\n    player.setVelocityX(0);\n\n    player.anims.play('turn');\n  }\n\n  if (cursors.up.isDown && player.body.touching.down) {\n    player.setVelocityY(-330);\n  }\n}\n","import Phaser from 'phaser';\nimport preload from './preload';\nimport create from './create';\nimport {update} from './create';\n\nexport const WIDTH = 800;\nexport const HEIGHT = 600;\n\nexport const getCenter = () => {\n    return {\n        height: HEIGHT / 2,\n        width: WIDTH / 2\n    }\n};\n\nexport default {\n  type: Phaser.AUTO,\n  width: WIDTH,\n  height: HEIGHT,\n  physics: {\n    default: 'arcade',\n    arcade: {\n      gravity: {y: 300},\n      debug: false\n    },\n  },\n  scene: {\n    preload,\n    create,\n    update\n  },\n};\n","export default function preload() {\n    this.load.image('sky', 'assets/sky.png');\n    this.load.image('ground', 'assets/platform.png');\n    this.load.image('star', 'assets/star.png');\n    this.load.image('bomb', 'assets/bomb.png');\n    this.load.image('dollar', 'assets/dollar.png');\n    this.load.spritesheet('dude', \n        'assets/dude.png',\n        { frameWidth: 32, frameHeight: 48 }\n    );\n}\n","import React from 'react';\nimport Phaser from \"phaser\";\nimport config from './config';\nimport './App.css'\n\nnew Phaser.Game(config);\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"title\">Tontona and the riders of the stolen dollar</div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}